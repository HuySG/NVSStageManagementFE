"use client";

import { useParams } from "next/navigation";

import { format } from "date-fns";
import Link from "next/link";
import {
  useGetAssetByIdQuery,
  useGetAssetRequestsForManagerQuery,
  useGetBorrowedAssetsQuery,
} from "@/state/api";
import { Badge } from "@/components/ui/badge";

const BorrowedAssetDetailPage = () => {
  const { projectId, departmentId, borrowedID } = useParams<{
    projectId: string;
    departmentId: string;
    borrowedID: string;
  }>();

  // L·∫•y danh s√°ch t√†i s·∫£n m∆∞·ª£n
  const { data: borrowedAssets = [] } = useGetBorrowedAssetsQuery();
  // L·∫•y danh s√°ch y√™u c·∫ßu t√†i s·∫£n
  const { data: assetRequests = [] } = useGetAssetRequestsForManagerQuery();

  // T·∫°o map taskID -> request ƒë·ªÉ d·ªÖ lookup
  const requestMap: Record<string, any> = {};
  assetRequests.forEach((request) => {
    if (request.task?.taskID) {
      requestMap[request.task.taskID] = request;
    }
  });

  // T√¨m t√†i s·∫£n theo borrowedID
  const asset = borrowedAssets.find((a) => a.borrowedID === borrowedID);
  const assetId = asset?.assetID;

  // üõ† Hook lu√¥n ƒë∆∞·ª£c g·ªçi, nh∆∞ng c√≥ th·ªÉ skip n·∫øu kh√¥ng c√≥ assetId
  const { data: assetDetail, isLoading: isLoadingAsset } = useGetAssetByIdQuery(
    assetId!,
    { skip: !assetId },
  );

  // T·∫°o c√°c th√¥ng tin hi·ªÉn th·ªã
  const request = asset ? requestMap[asset.taskID] : undefined;
  const borrower = request?.requesterInfo?.fullName ?? "Kh√¥ng r√µ";
  const taskTitle = request?.task?.title ?? "Kh√¥ng r√µ";
  const assetName = assetDetail?.assetName ?? "Kh√¥ng r√µ";

  // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p asset kh√¥ng t·ªìn t·∫°i sau khi g·ªçi hook
  if (!asset) {
    return (
      <div className="p-8 text-center text-gray-500">
        Kh√¥ng t√¨m th·∫•y t√†i s·∫£n.
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white px-8 py-10">
      <Link
        href={`/borrowedAssetsForProject/${projectId}/${departmentId}`}
        className="text-sm text-blue-600 hover:underline"
      >
        ‚Üê Quay l·∫°i danh s√°ch t√†i s·∫£n
      </Link>

      <h1 className="mt-4 text-3xl font-bold text-gray-800">
        Chi ti·∫øt T√†i s·∫£n M∆∞·ª£n
      </h1>

      <div className="mt-6 grid grid-cols-1 gap-6 text-sm text-gray-700 md:grid-cols-2">
        <div>
          <p className="font-medium text-gray-500">M√£ t√†i s·∫£n:</p>
          <p>{assetId || "Kh√¥ng r√µ"}</p>
        </div>
        <div>
          <p className="font-medium text-gray-500">T√™n t√†i s·∫£n:</p>
          <p>{isLoadingAsset ? "ƒêang t·∫£i..." : assetName}</p>
        </div>
        <div>
          <p className="font-medium text-gray-500">Ng∆∞·ªùi m∆∞·ª£n:</p>
          <p>{borrower}</p>
        </div>
        <div>
          <p className="font-medium text-gray-500">Task li√™n quan:</p>
          <p>{taskTitle}</p>
        </div>
        <div>
          <p className="font-medium text-gray-500">Th·ªùi gian m∆∞·ª£n:</p>
          <p>{format(new Date(asset.borrowTime), "dd/MM/yyyy HH:mm")}</p>
        </div>
        <div>
          <p className="font-medium text-gray-500">Th·ªùi gian s·ª≠ d·ª•ng:</p>
          <p>
            {format(new Date(asset.borrowTime), "dd/MM/yyyy")} -{" "}
            {format(new Date(asset.endTime), "dd/MM/yyyy")}
          </p>
        </div>
        <div>
          <p className="font-medium text-gray-500">Tr·∫°ng th√°i:</p>
          <Badge variant="outline" className="text-xs">
            {asset.status}
          </Badge>
        </div>
        <div className="md:col-span-2">
          <p className="font-medium text-gray-500">M√¥ t·∫£:</p>
          <p>{asset.description || "Kh√¥ng c√≥ m√¥ t·∫£"}</p>
        </div>
      </div>
    </div>
  );
};

export default BorrowedAssetDetailPage;
